import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';
import { fetchAuditRecords } from './services/api';

export type AppDispatch = typeof store.dispatch;
export type RootState = ReturnType<typeof store.getState>;
export type AppThunk<ReturnType = void> = ThunkAction<
	ReturnType,
	RootState,
	unknown,
	Action<string>
>;

export interface AppState {
	auditRecords: {
		data: any;
		status: 'idle' | 'loading' | 'failed';
	};
}

const initialState: AppState = {
	auditRecords: { data: {}, status: 'idle' },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAuditRecordsAsync = createAsyncThunk('counter/fetchAuditRecords', async () => {
	const auditRecords = await fetchAuditRecords();
	// The value we return becomes the `fulfilled` action payload
	return auditRecords;
});

export const appSlice = createSlice({
	name: 'app',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		resetAuditRecords: (state) => ({
			...state,
			auditRecords: { ...state.auditRecords, data: {} },
		}),
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(fetchAuditRecordsAsync.pending, (state) => {
				state.auditRecords.status = 'loading';
			})
			.addCase(fetchAuditRecordsAsync.fulfilled, (state, action) => {
				state.auditRecords.status = 'idle';
				state.auditRecords.data = action.payload;
			})
			.addCase(fetchAuditRecordsAsync.rejected, (state) => {
				state.auditRecords.status = 'failed';
			});
	},
});

export const { resetAuditRecords } = appSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAuditRecords = (state: RootState) => state.app.auditRecords;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
// 	(amount: number): AppThunk =>
// 	(dispatch, getState) => {
// 		const currentValue = selectCount(getState());
// 		if (currentValue % 2 === 1) {
// 			dispatch(incrementByAmount(amount));
// 		}
// 	};

export default appSlice.reducer;

export const store = configureStore({
	reducer: {
		app: appSlice.reducer,
	},
});
